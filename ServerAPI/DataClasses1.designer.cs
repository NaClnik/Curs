#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Test52")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBreeds(Breeds instance);
    partial void UpdateBreeds(Breeds instance);
    partial void DeleteBreeds(Breeds instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertCells(Cells instance);
    partial void UpdateCells(Cells instance);
    partial void DeleteCells(Cells instance);
    partial void InsertChickens(Chickens instance);
    partial void UpdateChickens(Chickens instance);
    partial void DeleteChickens(Chickens instance);
    partial void InsertChiefs(Chiefs instance);
    partial void UpdateChiefs(Chiefs instance);
    partial void DeleteChiefs(Chiefs instance);
    partial void InsertDiets(Diets instance);
    partial void UpdateDiets(Diets instance);
    partial void DeleteDiets(Diets instance);
    partial void InsertDirectors(Directors instance);
    partial void UpdateDirectors(Directors instance);
    partial void DeleteDirectors(Directors instance);
    partial void InsertEmployees(Employees instance);
    partial void UpdateEmployees(Employees instance);
    partial void DeleteEmployees(Employees instance);
    partial void InsertLogins(Logins instance);
    partial void UpdateLogins(Logins instance);
    partial void DeleteLogins(Logins instance);
    partial void InsertPasswordHashes(PasswordHashes instance);
    partial void UpdatePasswordHashes(PasswordHashes instance);
    partial void DeletePasswordHashes(PasswordHashes instance);
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    partial void InsertReports(Reports instance);
    partial void UpdateReports(Reports instance);
    partial void DeleteReports(Reports instance);
    partial void InsertShops(Shops instance);
    partial void UpdateShops(Shops instance);
    partial void DeleteShops(Shops instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ServerAPI.Properties.Settings.Default.Test52ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Breeds> Breeds
		{
			get
			{
				return this.GetTable<Breeds>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Cells> Cells
		{
			get
			{
				return this.GetTable<Cells>();
			}
		}
		
		public System.Data.Linq.Table<Chickens> Chickens
		{
			get
			{
				return this.GetTable<Chickens>();
			}
		}
		
		public System.Data.Linq.Table<Chiefs> Chiefs
		{
			get
			{
				return this.GetTable<Chiefs>();
			}
		}
		
		public System.Data.Linq.Table<Diets> Diets
		{
			get
			{
				return this.GetTable<Diets>();
			}
		}
		
		public System.Data.Linq.Table<Directors> Directors
		{
			get
			{
				return this.GetTable<Directors>();
			}
		}
		
		public System.Data.Linq.Table<Employees> Employees
		{
			get
			{
				return this.GetTable<Employees>();
			}
		}
		
		public System.Data.Linq.Table<Logins> Logins
		{
			get
			{
				return this.GetTable<Logins>();
			}
		}
		
		public System.Data.Linq.Table<PasswordHashes> PasswordHashes
		{
			get
			{
				return this.GetTable<PasswordHashes>();
			}
		}
		
		public System.Data.Linq.Table<People> People
		{
			get
			{
				return this.GetTable<People>();
			}
		}
		
		public System.Data.Linq.Table<Reports> Reports
		{
			get
			{
				return this.GetTable<Reports>();
			}
		}
		
		public System.Data.Linq.Table<Shops> Shops
		{
			get
			{
				return this.GetTable<Shops>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Breeds")]
	public partial class Breeds : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private int _Performance;
		
		private double _AverageWeight;
		
		private int _Diet_Id;
		
		private EntitySet<Chickens> _Chickens;
		
		private EntityRef<Diets> _Diets;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPerformanceChanging(int value);
    partial void OnPerformanceChanged();
    partial void OnAverageWeightChanging(double value);
    partial void OnAverageWeightChanged();
    partial void OnDiet_IdChanging(int value);
    partial void OnDiet_IdChanged();
    #endregion
		
		public Breeds()
		{
			this._Chickens = new EntitySet<Chickens>(new Action<Chickens>(this.attach_Chickens), new Action<Chickens>(this.detach_Chickens));
			this._Diets = default(EntityRef<Diets>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Performance", DbType="Int NOT NULL")]
		public int Performance
		{
			get
			{
				return this._Performance;
			}
			set
			{
				if ((this._Performance != value))
				{
					this.OnPerformanceChanging(value);
					this.SendPropertyChanging();
					this._Performance = value;
					this.SendPropertyChanged("Performance");
					this.OnPerformanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageWeight", DbType="Float NOT NULL")]
		public double AverageWeight
		{
			get
			{
				return this._AverageWeight;
			}
			set
			{
				if ((this._AverageWeight != value))
				{
					this.OnAverageWeightChanging(value);
					this.SendPropertyChanging();
					this._AverageWeight = value;
					this.SendPropertyChanged("AverageWeight");
					this.OnAverageWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diet_Id", DbType="Int NOT NULL")]
		public int Diet_Id
		{
			get
			{
				return this._Diet_Id;
			}
			set
			{
				if ((this._Diet_Id != value))
				{
					if (this._Diets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiet_IdChanging(value);
					this.SendPropertyChanging();
					this._Diet_Id = value;
					this.SendPropertyChanged("Diet_Id");
					this.OnDiet_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Breeds_Chickens", Storage="_Chickens", ThisKey="Id", OtherKey="Breed_Id")]
		public EntitySet<Chickens> Chickens
		{
			get
			{
				return this._Chickens;
			}
			set
			{
				this._Chickens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diets_Breeds", Storage="_Diets", ThisKey="Diet_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Diets Diets
		{
			get
			{
				return this._Diets.Entity;
			}
			set
			{
				Diets previousValue = this._Diets.Entity;
				if (((previousValue != value) 
							|| (this._Diets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Diets.Entity = null;
						previousValue.Breeds.Remove(this);
					}
					this._Diets.Entity = value;
					if ((value != null))
					{
						value.Breeds.Add(this);
						this._Diet_Id = value.Id;
					}
					else
					{
						this._Diet_Id = default(int);
					}
					this.SendPropertyChanged("Diets");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chickens(Chickens entity)
		{
			this.SendPropertyChanging();
			entity.Breeds = this;
		}
		
		private void detach_Chickens(Chickens entity)
		{
			this.SendPropertyChanging();
			entity.Breeds = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StatusString;
		
		private EntitySet<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusStringChanging(string value);
    partial void OnStatusStringChanged();
    #endregion
		
		public Status()
		{
			this._People = new EntitySet<People>(new Action<People>(this.attach_People), new Action<People>(this.detach_People));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusString", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StatusString
		{
			get
			{
				return this._StatusString;
			}
			set
			{
				if ((this._StatusString != value))
				{
					this.OnStatusStringChanging(value);
					this.SendPropertyChanging();
					this._StatusString = value;
					this.SendPropertyChanged("StatusString");
					this.OnStatusStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_People", Storage="_People", ThisKey="Id", OtherKey="Status_Id")]
		public EntitySet<People> People
		{
			get
			{
				return this._People;
			}
			set
			{
				this._People.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cells")]
	public partial class Cells : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RowNumber;
		
		private int _CellNumber;
		
		private int _Employee_Id;
		
		private int _Shop_Id;
		
		private EntitySet<Chickens> _Chickens;
		
		private EntityRef<Employees> _Employees;
		
		private EntityRef<Shops> _Shops;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRowNumberChanging(int value);
    partial void OnRowNumberChanged();
    partial void OnCellNumberChanging(int value);
    partial void OnCellNumberChanged();
    partial void OnEmployee_IdChanging(int value);
    partial void OnEmployee_IdChanged();
    partial void OnShop_IdChanging(int value);
    partial void OnShop_IdChanged();
    #endregion
		
		public Cells()
		{
			this._Chickens = new EntitySet<Chickens>(new Action<Chickens>(this.attach_Chickens), new Action<Chickens>(this.detach_Chickens));
			this._Employees = default(EntityRef<Employees>);
			this._Shops = default(EntityRef<Shops>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int NOT NULL")]
		public int RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellNumber", DbType="Int NOT NULL")]
		public int CellNumber
		{
			get
			{
				return this._CellNumber;
			}
			set
			{
				if ((this._CellNumber != value))
				{
					this.OnCellNumberChanging(value);
					this.SendPropertyChanging();
					this._CellNumber = value;
					this.SendPropertyChanged("CellNumber");
					this.OnCellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Id", DbType="Int NOT NULL")]
		public int Employee_Id
		{
			get
			{
				return this._Employee_Id;
			}
			set
			{
				if ((this._Employee_Id != value))
				{
					if (this._Employees.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_IdChanging(value);
					this.SendPropertyChanging();
					this._Employee_Id = value;
					this.SendPropertyChanged("Employee_Id");
					this.OnEmployee_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shop_Id", DbType="Int NOT NULL")]
		public int Shop_Id
		{
			get
			{
				return this._Shop_Id;
			}
			set
			{
				if ((this._Shop_Id != value))
				{
					if (this._Shops.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShop_IdChanging(value);
					this.SendPropertyChanging();
					this._Shop_Id = value;
					this.SendPropertyChanged("Shop_Id");
					this.OnShop_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cells_Chickens", Storage="_Chickens", ThisKey="Id", OtherKey="Cell_Id")]
		public EntitySet<Chickens> Chickens
		{
			get
			{
				return this._Chickens;
			}
			set
			{
				this._Chickens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Cells", Storage="_Employees", ThisKey="Employee_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employees Employees
		{
			get
			{
				return this._Employees.Entity;
			}
			set
			{
				Employees previousValue = this._Employees.Entity;
				if (((previousValue != value) 
							|| (this._Employees.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employees.Entity = null;
						previousValue.Cells.Remove(this);
					}
					this._Employees.Entity = value;
					if ((value != null))
					{
						value.Cells.Add(this);
						this._Employee_Id = value.Id;
					}
					else
					{
						this._Employee_Id = default(int);
					}
					this.SendPropertyChanged("Employees");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shops_Cells", Storage="_Shops", ThisKey="Shop_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shops Shops
		{
			get
			{
				return this._Shops.Entity;
			}
			set
			{
				Shops previousValue = this._Shops.Entity;
				if (((previousValue != value) 
							|| (this._Shops.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shops.Entity = null;
						previousValue.Cells.Remove(this);
					}
					this._Shops.Entity = value;
					if ((value != null))
					{
						value.Cells.Add(this);
						this._Shop_Id = value.Id;
					}
					else
					{
						this._Shop_Id = default(int);
					}
					this.SendPropertyChanged("Shops");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chickens(Chickens entity)
		{
			this.SendPropertyChanging();
			entity.Cells = this;
		}
		
		private void detach_Chickens(Chickens entity)
		{
			this.SendPropertyChanging();
			entity.Cells = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chickens")]
	public partial class Chickens : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private double _Weight;
		
		private int _Age;
		
		private int _NumberOfEggs;
		
		private int _Cell_Id;
		
		private int _Breed_Id;
		
		private EntitySet<Reports> _Reports;
		
		private EntityRef<Breeds> _Breeds;
		
		private EntityRef<Cells> _Cells;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWeightChanging(double value);
    partial void OnWeightChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnNumberOfEggsChanging(int value);
    partial void OnNumberOfEggsChanged();
    partial void OnCell_IdChanging(int value);
    partial void OnCell_IdChanged();
    partial void OnBreed_IdChanging(int value);
    partial void OnBreed_IdChanged();
    #endregion
		
		public Chickens()
		{
			this._Reports = new EntitySet<Reports>(new Action<Reports>(this.attach_Reports), new Action<Reports>(this.detach_Reports));
			this._Breeds = default(EntityRef<Breeds>);
			this._Cells = default(EntityRef<Cells>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float NOT NULL")]
		public double Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfEggs", DbType="Int NOT NULL")]
		public int NumberOfEggs
		{
			get
			{
				return this._NumberOfEggs;
			}
			set
			{
				if ((this._NumberOfEggs != value))
				{
					this.OnNumberOfEggsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfEggs = value;
					this.SendPropertyChanged("NumberOfEggs");
					this.OnNumberOfEggsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell_Id", DbType="Int NOT NULL")]
		public int Cell_Id
		{
			get
			{
				return this._Cell_Id;
			}
			set
			{
				if ((this._Cell_Id != value))
				{
					if (this._Cells.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCell_IdChanging(value);
					this.SendPropertyChanging();
					this._Cell_Id = value;
					this.SendPropertyChanged("Cell_Id");
					this.OnCell_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Breed_Id", DbType="Int NOT NULL")]
		public int Breed_Id
		{
			get
			{
				return this._Breed_Id;
			}
			set
			{
				if ((this._Breed_Id != value))
				{
					if (this._Breeds.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBreed_IdChanging(value);
					this.SendPropertyChanging();
					this._Breed_Id = value;
					this.SendPropertyChanged("Breed_Id");
					this.OnBreed_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chickens_Reports", Storage="_Reports", ThisKey="Id", OtherKey="Chicken_Id")]
		public EntitySet<Reports> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Breeds_Chickens", Storage="_Breeds", ThisKey="Breed_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Breeds Breeds
		{
			get
			{
				return this._Breeds.Entity;
			}
			set
			{
				Breeds previousValue = this._Breeds.Entity;
				if (((previousValue != value) 
							|| (this._Breeds.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Breeds.Entity = null;
						previousValue.Chickens.Remove(this);
					}
					this._Breeds.Entity = value;
					if ((value != null))
					{
						value.Chickens.Add(this);
						this._Breed_Id = value.Id;
					}
					else
					{
						this._Breed_Id = default(int);
					}
					this.SendPropertyChanged("Breeds");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cells_Chickens", Storage="_Cells", ThisKey="Cell_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cells Cells
		{
			get
			{
				return this._Cells.Entity;
			}
			set
			{
				Cells previousValue = this._Cells.Entity;
				if (((previousValue != value) 
							|| (this._Cells.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cells.Entity = null;
						previousValue.Chickens.Remove(this);
					}
					this._Cells.Entity = value;
					if ((value != null))
					{
						value.Chickens.Add(this);
						this._Cell_Id = value.Id;
					}
					else
					{
						this._Cell_Id = default(int);
					}
					this.SendPropertyChanged("Cells");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Reports entity)
		{
			this.SendPropertyChanging();
			entity.Chickens = this;
		}
		
		private void detach_Reports(Reports entity)
		{
			this.SendPropertyChanging();
			entity.Chickens = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chiefs")]
	public partial class Chiefs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Person_Id;
		
		private EntityRef<Shops> _Shops;
		
		private EntityRef<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPerson_IdChanging(int value);
    partial void OnPerson_IdChanged();
    #endregion
		
		public Chiefs()
		{
			this._Shops = default(EntityRef<Shops>);
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_Id", DbType="Int NOT NULL")]
		public int Person_Id
		{
			get
			{
				return this._Person_Id;
			}
			set
			{
				if ((this._Person_Id != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IdChanging(value);
					this.SendPropertyChanging();
					this._Person_Id = value;
					this.SendPropertyChanged("Person_Id");
					this.OnPerson_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chiefs_Shops", Storage="_Shops", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Shops Shops
		{
			get
			{
				return this._Shops.Entity;
			}
			set
			{
				Shops previousValue = this._Shops.Entity;
				if (((previousValue != value) 
							|| (this._Shops.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shops.Entity = null;
						previousValue.Chiefs = null;
					}
					this._Shops.Entity = value;
					if ((value != null))
					{
						value.Chiefs = this;
					}
					this.SendPropertyChanged("Shops");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Chiefs", Storage="_People", ThisKey="Person_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Chiefs.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Chiefs.Add(this);
						this._Person_Id = value.Id;
					}
					else
					{
						this._Person_Id = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diets")]
	public partial class Diets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DietTitle;
		
		private EntitySet<Breeds> _Breeds;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDietTitleChanging(string value);
    partial void OnDietTitleChanged();
    #endregion
		
		public Diets()
		{
			this._Breeds = new EntitySet<Breeds>(new Action<Breeds>(this.attach_Breeds), new Action<Breeds>(this.detach_Breeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DietTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DietTitle
		{
			get
			{
				return this._DietTitle;
			}
			set
			{
				if ((this._DietTitle != value))
				{
					this.OnDietTitleChanging(value);
					this.SendPropertyChanging();
					this._DietTitle = value;
					this.SendPropertyChanged("DietTitle");
					this.OnDietTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diets_Breeds", Storage="_Breeds", ThisKey="Id", OtherKey="Diet_Id")]
		public EntitySet<Breeds> Breeds
		{
			get
			{
				return this._Breeds;
			}
			set
			{
				this._Breeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Breeds(Breeds entity)
		{
			this.SendPropertyChanging();
			entity.Diets = this;
		}
		
		private void detach_Breeds(Breeds entity)
		{
			this.SendPropertyChanging();
			entity.Diets = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directors")]
	public partial class Directors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Person_Id;
		
		private EntityRef<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPerson_IdChanging(int value);
    partial void OnPerson_IdChanged();
    #endregion
		
		public Directors()
		{
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_Id", DbType="Int NOT NULL")]
		public int Person_Id
		{
			get
			{
				return this._Person_Id;
			}
			set
			{
				if ((this._Person_Id != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IdChanging(value);
					this.SendPropertyChanging();
					this._Person_Id = value;
					this.SendPropertyChanged("Person_Id");
					this.OnPerson_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Directors", Storage="_People", ThisKey="Person_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Directors.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Directors.Add(this);
						this._Person_Id = value.Id;
					}
					else
					{
						this._Person_Id = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employees : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Person_Id;
		
		private int _Shop_Id;
		
		private EntitySet<Cells> _Cells;
		
		private EntityRef<People> _People;
		
		private EntityRef<Shops> _Shops;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPerson_IdChanging(int value);
    partial void OnPerson_IdChanged();
    partial void OnShop_IdChanging(int value);
    partial void OnShop_IdChanged();
    #endregion
		
		public Employees()
		{
			this._Cells = new EntitySet<Cells>(new Action<Cells>(this.attach_Cells), new Action<Cells>(this.detach_Cells));
			this._People = default(EntityRef<People>);
			this._Shops = default(EntityRef<Shops>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person_Id", DbType="Int NOT NULL")]
		public int Person_Id
		{
			get
			{
				return this._Person_Id;
			}
			set
			{
				if ((this._Person_Id != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerson_IdChanging(value);
					this.SendPropertyChanging();
					this._Person_Id = value;
					this.SendPropertyChanged("Person_Id");
					this.OnPerson_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shop_Id", DbType="Int NOT NULL")]
		public int Shop_Id
		{
			get
			{
				return this._Shop_Id;
			}
			set
			{
				if ((this._Shop_Id != value))
				{
					if (this._Shops.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShop_IdChanging(value);
					this.SendPropertyChanging();
					this._Shop_Id = value;
					this.SendPropertyChanged("Shop_Id");
					this.OnShop_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employees_Cells", Storage="_Cells", ThisKey="Id", OtherKey="Employee_Id")]
		public EntitySet<Cells> Cells
		{
			get
			{
				return this._Cells;
			}
			set
			{
				this._Cells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Employees", Storage="_People", ThisKey="Person_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._Person_Id = value.Id;
					}
					else
					{
						this._Person_Id = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shops_Employees", Storage="_Shops", ThisKey="Shop_Id", OtherKey="Id", IsForeignKey=true)]
		public Shops Shops
		{
			get
			{
				return this._Shops.Entity;
			}
			set
			{
				Shops previousValue = this._Shops.Entity;
				if (((previousValue != value) 
							|| (this._Shops.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shops.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Shops.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._Shop_Id = value.Id;
					}
					else
					{
						this._Shop_Id = default(int);
					}
					this.SendPropertyChanged("Shops");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cells(Cells entity)
		{
			this.SendPropertyChanging();
			entity.Employees = this;
		}
		
		private void detach_Cells(Cells entity)
		{
			this.SendPropertyChanging();
			entity.Employees = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logins")]
	public partial class Logins : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LoginString;
		
		private EntitySet<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginStringChanging(string value);
    partial void OnLoginStringChanged();
    #endregion
		
		public Logins()
		{
			this._People = new EntitySet<People>(new Action<People>(this.attach_People), new Action<People>(this.detach_People));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginString", DbType="NVarChar(MAX)")]
		public string LoginString
		{
			get
			{
				return this._LoginString;
			}
			set
			{
				if ((this._LoginString != value))
				{
					this.OnLoginStringChanging(value);
					this.SendPropertyChanging();
					this._LoginString = value;
					this.SendPropertyChanged("LoginString");
					this.OnLoginStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logins_People", Storage="_People", ThisKey="Id", OtherKey="Login_Id")]
		public EntitySet<People> People
		{
			get
			{
				return this._People;
			}
			set
			{
				this._People.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.Logins = this;
		}
		
		private void detach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.Logins = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PasswordHashes")]
	public partial class PasswordHashes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PasswordHashString;
		
		private EntitySet<People> _People;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPasswordHashStringChanging(string value);
    partial void OnPasswordHashStringChanged();
    #endregion
		
		public PasswordHashes()
		{
			this._People = new EntitySet<People>(new Action<People>(this.attach_People), new Action<People>(this.detach_People));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHashString", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PasswordHashString
		{
			get
			{
				return this._PasswordHashString;
			}
			set
			{
				if ((this._PasswordHashString != value))
				{
					this.OnPasswordHashStringChanging(value);
					this.SendPropertyChanging();
					this._PasswordHashString = value;
					this.SendPropertyChanged("PasswordHashString");
					this.OnPasswordHashStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PasswordHashes_People", Storage="_People", ThisKey="Id", OtherKey="PasswordHash_Id")]
		public EntitySet<People> People
		{
			get
			{
				return this._People;
			}
			set
			{
				this._People.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.PasswordHashes = this;
		}
		
		private void detach_People(People entity)
		{
			this.SendPropertyChanging();
			entity.PasswordHashes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
	public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _Passport;
		
		private double _Salary;
		
		private int _Status_Id;
		
		private int _Login_Id;
		
		private int _PasswordHash_Id;
		
		private EntitySet<Chiefs> _Chiefs;
		
		private EntitySet<Directors> _Directors;
		
		private EntitySet<Employees> _Employees;
		
		private EntityRef<Logins> _Logins;
		
		private EntityRef<PasswordHashes> _PasswordHashes;
		
		private EntityRef<Status> _Status;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnSalaryChanging(double value);
    partial void OnSalaryChanged();
    partial void OnStatus_IdChanging(int value);
    partial void OnStatus_IdChanged();
    partial void OnLogin_IdChanging(int value);
    partial void OnLogin_IdChanged();
    partial void OnPasswordHash_IdChanging(int value);
    partial void OnPasswordHash_IdChanged();
    #endregion
		
		public People()
		{
			this._Chiefs = new EntitySet<Chiefs>(new Action<Chiefs>(this.attach_Chiefs), new Action<Chiefs>(this.detach_Chiefs));
			this._Directors = new EntitySet<Directors>(new Action<Directors>(this.attach_Directors), new Action<Directors>(this.detach_Directors));
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			this._Logins = default(EntityRef<Logins>);
			this._PasswordHashes = default(EntityRef<PasswordHashes>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float NOT NULL")]
		public double Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_Id", DbType="Int NOT NULL")]
		public int Status_Id
		{
			get
			{
				return this._Status_Id;
			}
			set
			{
				if ((this._Status_Id != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._Status_Id = value;
					this.SendPropertyChanged("Status_Id");
					this.OnStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_Id", DbType="Int NOT NULL")]
		public int Login_Id
		{
			get
			{
				return this._Login_Id;
			}
			set
			{
				if ((this._Login_Id != value))
				{
					if (this._Logins.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogin_IdChanging(value);
					this.SendPropertyChanging();
					this._Login_Id = value;
					this.SendPropertyChanged("Login_Id");
					this.OnLogin_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash_Id", DbType="Int NOT NULL")]
		public int PasswordHash_Id
		{
			get
			{
				return this._PasswordHash_Id;
			}
			set
			{
				if ((this._PasswordHash_Id != value))
				{
					if (this._PasswordHashes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPasswordHash_IdChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash_Id = value;
					this.SendPropertyChanged("PasswordHash_Id");
					this.OnPasswordHash_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Chiefs", Storage="_Chiefs", ThisKey="Id", OtherKey="Person_Id")]
		public EntitySet<Chiefs> Chiefs
		{
			get
			{
				return this._Chiefs;
			}
			set
			{
				this._Chiefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Directors", Storage="_Directors", ThisKey="Id", OtherKey="Person_Id")]
		public EntitySet<Directors> Directors
		{
			get
			{
				return this._Directors;
			}
			set
			{
				this._Directors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="People_Employees", Storage="_Employees", ThisKey="Id", OtherKey="Person_Id")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logins_People", Storage="_Logins", ThisKey="Login_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Logins Logins
		{
			get
			{
				return this._Logins.Entity;
			}
			set
			{
				Logins previousValue = this._Logins.Entity;
				if (((previousValue != value) 
							|| (this._Logins.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Logins.Entity = null;
						previousValue.People.Remove(this);
					}
					this._Logins.Entity = value;
					if ((value != null))
					{
						value.People.Add(this);
						this._Login_Id = value.Id;
					}
					else
					{
						this._Login_Id = default(int);
					}
					this.SendPropertyChanged("Logins");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PasswordHashes_People", Storage="_PasswordHashes", ThisKey="PasswordHash_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PasswordHashes PasswordHashes
		{
			get
			{
				return this._PasswordHashes.Entity;
			}
			set
			{
				PasswordHashes previousValue = this._PasswordHashes.Entity;
				if (((previousValue != value) 
							|| (this._PasswordHashes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PasswordHashes.Entity = null;
						previousValue.People.Remove(this);
					}
					this._PasswordHashes.Entity = value;
					if ((value != null))
					{
						value.People.Add(this);
						this._PasswordHash_Id = value.Id;
					}
					else
					{
						this._PasswordHash_Id = default(int);
					}
					this.SendPropertyChanged("PasswordHashes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_People", Storage="_Status", ThisKey="Status_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.People.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.People.Add(this);
						this._Status_Id = value.Id;
					}
					else
					{
						this._Status_Id = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chiefs(Chiefs entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Chiefs(Chiefs entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Directors(Directors entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Directors(Directors entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.People = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.People = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Reports : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Eggs;
		
		private System.DateTime _Date;
		
		private int _Chicken_Id;
		
		private EntityRef<Chickens> _Chickens;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEggsChanging(int value);
    partial void OnEggsChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnChicken_IdChanging(int value);
    partial void OnChicken_IdChanged();
    #endregion
		
		public Reports()
		{
			this._Chickens = default(EntityRef<Chickens>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eggs", DbType="Int NOT NULL")]
		public int Eggs
		{
			get
			{
				return this._Eggs;
			}
			set
			{
				if ((this._Eggs != value))
				{
					this.OnEggsChanging(value);
					this.SendPropertyChanging();
					this._Eggs = value;
					this.SendPropertyChanged("Eggs");
					this.OnEggsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chicken_Id", DbType="Int NOT NULL")]
		public int Chicken_Id
		{
			get
			{
				return this._Chicken_Id;
			}
			set
			{
				if ((this._Chicken_Id != value))
				{
					if (this._Chickens.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChicken_IdChanging(value);
					this.SendPropertyChanging();
					this._Chicken_Id = value;
					this.SendPropertyChanged("Chicken_Id");
					this.OnChicken_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chickens_Reports", Storage="_Chickens", ThisKey="Chicken_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Chickens Chickens
		{
			get
			{
				return this._Chickens.Entity;
			}
			set
			{
				Chickens previousValue = this._Chickens.Entity;
				if (((previousValue != value) 
							|| (this._Chickens.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chickens.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Chickens.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._Chicken_Id = value.Id;
					}
					else
					{
						this._Chicken_Id = default(int);
					}
					this.SendPropertyChanged("Chickens");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shops")]
	public partial class Shops : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private EntitySet<Cells> _Cells;
		
		private EntitySet<Employees> _Employees;
		
		private EntityRef<Chiefs> _Chiefs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public Shops()
		{
			this._Cells = new EntitySet<Cells>(new Action<Cells>(this.attach_Cells), new Action<Cells>(this.detach_Cells));
			this._Employees = new EntitySet<Employees>(new Action<Employees>(this.attach_Employees), new Action<Employees>(this.detach_Employees));
			this._Chiefs = default(EntityRef<Chiefs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Chiefs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shops_Cells", Storage="_Cells", ThisKey="Id", OtherKey="Shop_Id")]
		public EntitySet<Cells> Cells
		{
			get
			{
				return this._Cells;
			}
			set
			{
				this._Cells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shops_Employees", Storage="_Employees", ThisKey="Id", OtherKey="Shop_Id")]
		public EntitySet<Employees> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chiefs_Shops", Storage="_Chiefs", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Chiefs Chiefs
		{
			get
			{
				return this._Chiefs.Entity;
			}
			set
			{
				Chiefs previousValue = this._Chiefs.Entity;
				if (((previousValue != value) 
							|| (this._Chiefs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chiefs.Entity = null;
						previousValue.Shops = null;
					}
					this._Chiefs.Entity = value;
					if ((value != null))
					{
						value.Shops = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Chiefs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cells(Cells entity)
		{
			this.SendPropertyChanging();
			entity.Shops = this;
		}
		
		private void detach_Cells(Cells entity)
		{
			this.SendPropertyChanging();
			entity.Shops = null;
		}
		
		private void attach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Shops = this;
		}
		
		private void detach_Employees(Employees entity)
		{
			this.SendPropertyChanging();
			entity.Shops = null;
		}
	}
}
#pragma warning restore 1591
